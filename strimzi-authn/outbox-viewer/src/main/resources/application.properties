quarkus.container-image.group=lordofthejars
quarkus.container-image.registry=quay.io

quarkus.kubernetes.namespace=kafka
quarkus.kubernetes.mounts.user-volume.path=/tmp/user
quarkus.kubernetes.mounts.cluster-volume.path=/tmp/cluster

quarkus.kubernetes.secret-volumes.user-volume.secret-name=my-connect
quarkus.kubernetes.secret-volumes.cluster-volume.secret-name=my-cluster-cluster-ca-cert

%prod.quarkus.kubernetes-config.secrets.enabled=true
quarkus.kubernetes-config.secrets=my-connect,my-cluster-cluster-ca-cert

kafka.bootstrap.servers=my-cluster-kafka-bootstrap:9093
kafka.ssl.truststore.location=/tmp/cluster/ca.p12
kafka.ssl.truststore.password=${ca.password}
kafka.ssl.truststore.type=PKCS12
kafka.ssl.keystore.location=/tmp/user/user.p12
kafka.ssl.keystore.password=${user.password}
kafka.ssl.keystore.type=PKCS12
kafka.security.protocol=SSL

mp.messaging.incoming.outboxevent.topic=mysql.moviesdb.OutboxEvent
mp.messaging.incoming.outboxevent.offset.reset=earliest


mp.messaging.incoming.outboxevent.bootstrap.servers=my-cluster-kafka-bootstrap:9093
mp.messaging.incoming.outboxevent.ssl.truststore.location=/tmp/cluster/ca.p12
mp.messaging.incoming.outboxevent.ssl.truststore.password=${ca.password}
mp.messaging.incoming.outboxevent.ssl.truststore.type=PKCS12
mp.messaging.incoming.outboxevent.ssl.keystore.location=/tmp/user/user.p12
mp.messaging.incoming.outboxevent.ssl.keystore.password=${user.password}
mp.messaging.incoming.outboxevent.ssl.keystore.type=PKCS12
mp.messaging.incoming.outboxevent.security.protocol=SSL


